import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout, BatchNormalization
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

def generate_array(x_size, y_size):
    """
    Generates an array filled with ones and returns meshgrid values.
    
    Parameters:
    - x_size: Width of the array.
    - y_size: Height of the array.
    
    Returns:
    - x, y: Meshgrid arrays.
    - image: Array filled with ones of shape (x_size, y_size).
    """
    image = np.ones((x_size, y_size))
    x, y = np.meshgrid(np.arange(x_size), np.arange(y_size))
    return x, y, image

def generate_circle(x0, y0, r, x_size, y_size):
    """
    Generates an image with a circle.
    
    Parameters:
    - x0, y0: Center of the circle.
    - r: Radius of the circle.
    - x_size, y_size: Dimensions of the output image.
    
    Returns:
    - image: Image of the circle.
    """
    x, y, image = generate_array(x_size, y_size)
    mask = (x-x0)**2 + (y-y0)**2 >= r**2
    image[mask] = 0
    return image

def delete_side(x, y, image, x0, y0, b, theta):
    """
    Deletes/masks one side of a regular polygon from the given image.
    
    Parameters:
    - x, y: Meshgrid arrays.
    - image: Image to modify.
    - x0, y0: Reference point.
    - b: Distance to mask from the reference point.
    - theta: Angle of the side to delete.
    
    Returns:
    - x, y: Unmodified meshgrid arrays.
    - image: Modified image.
    """
    mask = (x-x0)*np.cos(theta*np.pi/180) + (y-y0)*np.sin(theta*np.pi/180) >= b
    image[mask] = 0
    return image

def generate_shape(sides, x0, y0, a, theta, res):
    
    
    """
    Generates an image of a regular polygon.
    
    Parameters:
    - sides: Number of sides of the polygon.
    - x0, y0: Center of the polygon.
    - a: Distance related to the size of the polygon.
    - theta: Initial angle for polygon generation.
    - x_size, y_size: Dimensions of the output image.
    
    Returns:
    - image: Image of the regular polygon.
    """
    x, y, image = generate_array(res, res)
    i_angle = 180*(sides-2)/sides
    b = a*np.tan(i_angle*np.pi/360)/2
    e_angle = 360/sides
    for i in range(sides):
        image = delete_side(x, y, image, x0, y0, b, theta)
        theta += e_angle
    image += np.random.randn(*image.shape)*(np.sqrt(image)+0.1)*0.2
    image = preprocess(x, y, image, res)
    return image

def plot_shape(resolution = 128, max_sides = 7):
    sides = np.random.randint(3, max_sides+1)
    i_angle = 180*(sides-2)/sides
    x0 = np.random.randint(resolution/4, 3*resolution/4)
    y0 = np.random.randint(resolution/4, 3*resolution/4)
    shape_size = np.random.randint(resolution/10, resolution/4)
    a = np.sin((180 - i_angle)*np.pi/180)*shape_size/np.sin(i_angle*np.pi/360)
    theta = np.random.randint(0, 360)
    image = generate_shape(sides, x0, y0, a, theta, resolution)
    plt.imshow(image)

def preprocess(x, y, im, res):
    im_z = np.where(im>0.3, 1.0, 0)
    dx = np.sum(x*im_z)/np.sum(im_z)-(res/2)
    dy = np.sum(y*im_z)/np.sum(im_z)-(res/2)
    im = np.roll(im, -int(np.round(dy)), axis=0)
    im = np.roll(im, -int(np.round(dx)), axis=1)
    return im
    
def generate_dataset(size, resolution, max_sides = 7):
    """
    Generates a dataset of labeled polygons.
    
    Parameters:
    - size: Number of images to generate.
    - resolution: Dimensions of each image (resolution x resolution).
    
    Returns:
    - dataset: List of tuples. Each tuple contains a label (number of sides) and the image array.
    """
    dataset = []
    for i in range(size):
        sides = np.random.randint(3, max_sides+1)
        i_angle = 180*(sides-2)/sides
        x0 = np.random.randint(resolution/4, 3*resolution/4)
        y0 = np.random.randint(resolution/4, 3*resolution/4)
        shape_size = np.random.randint(resolution/8, resolution/4)
        a = np.sin((180 - i_angle)*np.pi/180)*shape_size/np.sin(i_angle*np.pi/360)
        theta = np.random.randint(0, 360)
        image = generate_shape(sides, x0, y0, a, theta, resolution)
        labeled_image = (sides, image)
        dataset.append(labeled_image)
    return dataset

def plot_dataset(size = 5, resolution = 128,  max_sides = 7):
    dataset = generate_dataset(size, resolution, max_sides)

    fig, axs = plt.subplots(1, size)  # 1 row, 5 columns, figure size is set to 15x3

    for i in range(size):
        axs[i].imshow(dataset[i][1], cmap='gray', vmax=1.2, vmin=-0.2)  # Using grayscale colormap for clarity
        axs[i].axis('off')  # To hide axis values
        axs[i].set_title(f"Sides: {dataset[i][0]}")  # Setting title as the number of sides

    plt.tight_layout()  # Adjust spacing between images
    plt.show()

def train_model2D(data_size, res):
    dataset = generate_dataset(data_size, res)
    X = np.array([item[1] for item in dataset]).reshape(-1, res, res, 1)
    Y = to_categorical(np.array([item[0] for item in dataset]) - 3)
    train_size = int(0.8 * len(X))
    X_train, X_val = X[:train_size], X[train_size:]
    Y_train, Y_val = Y[:train_size], Y[train_size:]
    model = Sequential([
        Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(res, res, 1)),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.1),
        Conv2D(64, kernel_size=(3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.1),
        Flatten(),
        Dense(64, activation='relu'),
        Dropout(0.1),
        Dense(5, activation='softmax')
    ])
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    history = model.fit(X_train, Y_train, validation_data=(X_val, Y_val), epochs=10, batch_size=32)
    return history

def train_modelproj(data_size, res):
    dataset = generate_dataset(data_size, res, max_sides = 4)
    X = np.array([np.sum(item[1], axis = 0) for item in dataset]).reshape(-1, res, 1)
    Y = to_categorical(np.array([item[0] for item in dataset]) - 3)
    train_size = int(0.8 * len(X))
    X_train, X_val = X[:train_size], X[train_size:]
    Y_train, Y_val = Y[:train_size], Y[train_size:]
    model = Sequential([
        Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(res, res, 1)),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.1),
        Conv2D(64, kernel_size=(3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.1),
        Flatten(),
        Dense(64, activation='relu'),
        Dropout(0.1),
        Dense(2, activation='softmax')
    ])
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    history = model.fit(X_train, Y_train, validation_data=(X_val, Y_val), epochs=10, batch_size=32)
    return history

def visualise_training(history):
    plt.plot(history.history['accuracy'], label='accuracy')
    plt.plot(history.history['val_accuracy'], label='val_accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.ylim([0, 1])
    plt.legend(loc='lower right')
    plt.show()

