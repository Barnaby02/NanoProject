import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout, BatchNormalization
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt
from data_set import data_angles  
from scipy import ndimage

import os
os.environ["KMP_DUPLICATE_LIB_OK"]="TRUE"
#potentially bad. this is unstable solution to previous problem
def train2d_angles(dim, num):
    '''supposedly this will determine the angle in degrees the square is at.
    I can then use scipy.ndimage.rotate to "fix" the image'''
    Data = data_angles(dim, num)  # Generating a larger dataset for training
    
    # Reshaping images for the model and normalizing
    X = np.array([Data[0]]).reshape(-1, dim, dim, 1)
    
    # Converting labels to one-hot encoding.
    Y = to_categorical(Data[1])
    # print(X.shape, Y.shape)
    # print(Y)
    # Splitting the dataset into training and validation sets
    train_size = int(0.8 * len(X))
    X_train, X_val = X[:train_size], X[train_size:]
    Y_train, Y_val = Y[:train_size], Y[train_size:]
    
    # 2. Building the Model
    model = Sequential([
        Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=(dim, dim, 1)),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.1),
        Conv2D(32, kernel_size=(3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.1),
        Conv2D(16, kernel_size=(3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Dropout(0.1),
        Flatten(),
        Dense(1024, activation='relu'),
        Dropout(0.1),
        Dense(9, activation='softmax')
    ])
    
    
    # Compiling the model
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    
    # 3. Training the Model
    history = model.fit(X_train, Y_train, validation_data=(X_val, Y_val), epochs=15, batch_size=16)
    predictions = (model.predict(X) > 0.5).astype(int)
    return history, Data

def graph2d(history):
    # Optional: Visualize training progress
    plt.plot(history.history['accuracy'], label='accuracy')
    plt.plot(history.history['val_accuracy'], label='val_accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.ylim([0, 1])
    plt.legend(loc='lower right')
    plt.show()


a = train2d_angles(64, 1000)
graph2d(a[0])




def plot_fixes(Data):
    '''takes 3 values from data, plots them. attempts to rotate them and plot next to it.
    i want to use the ML output to rotate them back to "straight"
    cant get image to be suitably high resolution'''
    Data0 = Data[0][0:3]
    Data1 = Data[1][0:3]
    print(Data1)
    figsize=(3,3)
    fig, axs = plt.subplots(1, 6)  # 1 row, 6 columns, figure size is set to 15x3
    

    axs[0].imshow(Data0[0], cmap='gray')
    axs[1].imshow((ndimage.rotate(Data0[0], -Data1[0]*10, reshape=False)), cmap='gray')
    axs[0].set_title(f"A: {Data1[0]}")
    
    axs[2].imshow(Data0[1], cmap='gray')
    axs[3].imshow((ndimage.rotate(Data0[1], -Data1[1]*10, reshape=False)), cmap='gray')
    axs[2].set_title(f"A: {Data1[1]}")
    
    axs[4].imshow(Data0[2], cmap='gray')
    axs[5].imshow((ndimage.rotate(Data0[2], -Data1[2]*10, reshape=False)), cmap='gray')
    axs[4].set_title(f"A: {Data1[2]}")
    
    axs[0].axis('off')  # To hide axis values
    axs[1].axis('off')
    axs[2].axis('off')
    axs[3].axis('off')
    axs[4].axis('off')
    axs[5].axis('off')

    plt.tight_layout()  # Adjust spacing between images
    plt.show()
    
plot_fixes(a[1])


